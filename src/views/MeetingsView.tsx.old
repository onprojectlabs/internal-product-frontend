import { useState, useEffect } from 'react';
import { getMeetService } from '../config/environment';
import { useMeetings } from '../context/MeetingsContext';
import { Meeting, MeetingSource, UploadMethod, ProcessingStep } from '../context/MeetingsContext';
import { useNavigate } from 'react-router-dom';

// Mover la función fuera para que sea accesible a todos los componentes
const formatDateTime = (date: Date): string => {
    return new Intl.DateTimeFormat('es', {
        weekday: 'long',
        day: 'numeric',
        month: 'long',
        hour: '2-digit',
        minute: '2-digit'
    }).format(date);
};

export function MeetingsView() {
    const { meetings, addMeeting } = useMeetings();
    const [isLoading, setIsLoading] = useState(false);

    const googleMeetService = getMeetService();

    useEffect(() => {
        if (googleMeetService.isConnected()) {
            loadMeetings();
            const interval = setInterval(loadMeetings, 5 * 60 * 1000); // 5 minutos
            return () => clearInterval(interval);
        }
    }, []);

    const loadMeetings = async () => {
        setIsLoading(true);
        try {
            const meetingsFromService = await googleMeetService.getMeetings();
            
            const newMeetings = meetingsFromService.map(meeting => ({
                id: meeting.id,
                title: meeting.title,
                date: meeting.startTime,
                source: 'Google Meet' as MeetingSource,
                uploadMethod: 'Automático' as UploadMethod,
                currentStep: 'Pendiente' as ProcessingStep,
                progress: 0,
                meetLink: meeting.meetLink,
                status: {
                    isProcessing: false,
                    isFinished: false,
                    hasTranscription: false,
                    hasSummary: false
                }
            }));

            // En lugar de limpiar, actualizar solo las reuniones de Google Meet
            newMeetings.forEach(meeting => {
                const exists = meetings.some(m => m.id === meeting.id);
                if (!exists) {
                    addMeeting(meeting);
                }
            });
        } finally {
            setIsLoading(false);
        }
    };

    // Filtrar por estado
    const processingMeetings = meetings.filter(m => m.status.isProcessing);
    const processedMeetings = meetings.filter(m => m.status.isFinished);
    const upcomingMeetings = meetings.filter(m => 
        m.source !== 'Clip' && // Solo reuniones de plataformas
        new Date(m.date) > new Date() && 
        !m.status.isProcessing && 
        !m.status.isFinished
    );

    if (!googleMeetService.isConnected()) {
        return (
            <div className="p-6">
                <p className="text-gray-500">
                    Conecta tu cuenta de Google Meet en la sección de integraciones para ver tus reuniones.
                </p>
            </div>
        );
    }

    return (
        <div className="p-6">
            {isLoading ? (
                <div className="text-center py-4">
                    <p className="text-gray-500">Cargando reuniones...</p>
                </div>
            ) : (
                <>
                    <h1 className="text-2xl font-semibold mb-8">Reuniones</h1>

                    {/* Próximas reuniones (solo de plataformas integradas) */}
                    <section className="mb-12">
                        <h2 className="text-xl font-medium mb-4">Próximas reuniones</h2>
                        <div className="space-y-4">
                            {upcomingMeetings.map(meeting => (
                                <div key={meeting.id} className="border rounded-lg p-4">
                                    <div className="flex items-center gap-2 mb-2">
                                        <span className="text-sm bg-gray-100 px-2 py-1 rounded">
                                            {meeting.source}
                                        </span>
                                    </div>
                                    <div className="mb-2">
                                        <h4 className="font-medium">{meeting.title}</h4>
                                        <p className="text-sm text-gray-500">
                                            {formatDateTime(meeting.date)}
                                        </p>
                                    </div>
                                    {meeting.meetLink && (
                                        <div className="mt-4">
                                            <a 
                                                href={meeting.meetLink} 
                                                target="_blank" 
                                                rel="noopener noreferrer"
                                                className="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700"
                                            >
                                                Unirse
                                            </a>
                                        </div>
                                    )}
                                </div>
                            ))}
                        </div>
                    </section>

                    {/* Pipeline de procesamiento */}
                    <section className="mb-12">
                        <h2 className="text-xl font-medium mb-4">Pipeline</h2>
                        
                        {/* En procesamiento */}
                        <div className="mb-8">
                            <h3 className="text-lg font-medium mb-4">En procesamiento</h3>
                            <div className="space-y-4">
                                {processingMeetings.map(meeting => (
                                    <ProcessingMeeting 
                                        key={meeting.id} 
                                        meeting={meeting} 
                                    />
                                ))}
                            </div>
                        </div>

                        {/* Procesados */}
                        <div>
                            <h3 className="text-lg font-medium mb-4">Procesados</h3>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                {processedMeetings.map(meeting => (
                                    <ProcessedMeeting 
                                        key={meeting.id} 
                                        meeting={meeting} 
                                    />
                                ))}
                            </div>
                        </div>
                    </section>
                </>
            )}
        </div>
    );
}

function ProcessingMeeting({ meeting }: { meeting: Meeting }) {
    const navigate = useNavigate();

    return (
        <div className="border rounded-lg p-4">
            <div className="flex items-center gap-2 mb-2">
                <span className="text-sm bg-blue-100 px-2 py-1 rounded">
                    {meeting.source}
                </span>
                <span className="text-sm text-gray-500">
                    {meeting.uploadMethod}
                </span>
            </div>
            <div className="mb-2">
                <h4 className="font-medium">{meeting.title}</h4>
                <p className="text-sm text-gray-500">
                    {formatDateTime(meeting.date)}
                </p>
            </div>
            <div className="space-y-2">
                <div className="flex items-center gap-2">
                    <div className="w-full bg-gray-200 rounded-full h-2">
                        <div 
                            className="bg-blue-500 h-2 rounded-full transition-all duration-300" 
                            style={{width: `${meeting.progress}%`}}
                        />
                    </div>
                    <span className="text-sm text-gray-500">
                        {meeting.currentStep}
                    </span>
                </div>
            </div>
            {meeting.status.hasTranscription && (
                <button 
                    className="mt-4 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                    onClick={() => navigate(meeting.status.transcriptionUrl || '')}
                >
                    Ver transcripción
                </button>
            )}
        </div>
    );
}

function ProcessedMeeting({ meeting }: { meeting: Meeting }) {
    return (
        <div className="border rounded-lg p-4">
            <div className="flex items-center gap-2 mb-2">
                <span className="text-sm bg-green-100 px-2 py-1 rounded">
                    {meeting.source}
                </span>
                <span className="text-sm text-gray-500">
                    {meeting.uploadMethod}
                </span>
            </div>
            <div className="mb-4">
                <h4 className="font-medium">{meeting.title}</h4>
                <p className="text-sm text-gray-500">
                    {formatDateTime(meeting.date)}
                </p>
            </div>
            <div className="flex flex-wrap gap-2">
                {meeting.status.hasTranscription && (
                    <button 
                        className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 text-sm"
                        onClick={() => window.open(meeting.status.transcriptionUrl, '_blank')}
                    >
                        Ver transcripción
                    </button>
                )}
                {meeting.status.hasSummary && (
                    <button 
                        className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 text-sm"
                        onClick={() => window.open(`/summaries/${meeting.id}`, '_blank')}
                    >
                        Ver resumen
                    </button>
                )}
                <button 
                    className="px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 text-sm"
                    onClick={() => window.open(`/chat/${meeting.id}`, '_blank')}
                >
                    Chat con la reunión
                </button>
            </div>
        </div>
    );
} 